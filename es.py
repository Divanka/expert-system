# Form implementation generated from reading ui file 'es.ui'
#
# Created by: PyQt6 UI code generator 6.4.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import psycopg2


class Ui_MainWindow(object):
    radio_buts = []
    questions = []
    answers = []
    next_questions = []
    rules = []
    radio_buts = []
    id_quest = 0

    conn = psycopg2.connect(dbname='ES', user='postgres', 
                        password='123456', host='localhost')
    cur = conn.cursor()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(609, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setEnabled(True)
        self.pushButton.setGeometry(QtCore.QRect(390, 440, 121, 51))
        self.pushButton.setObjectName("pushButton")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(90, 260, 160, 141))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.radioButton = QtWidgets.QRadioButton(self.verticalLayoutWidget)
        self.radioButton.setObjectName("radioButton")
        self.verticalLayout.addWidget(self.radioButton)
        self.radioButton_2 = QtWidgets.QRadioButton(self.verticalLayoutWidget)
        self.radioButton_2.setObjectName("radioButton_2")
        self.verticalLayout.addWidget(self.radioButton_2)
        self.radioButton_3 = QtWidgets.QRadioButton(self.verticalLayoutWidget)
        self.radioButton_3.setObjectName("radioButton_3")
        self.verticalLayout.addWidget(self.radioButton_3)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(100, 80, 401, 101))
        self.label.setTextFormat(QtCore.Qt.TextFormat.AutoText)
        self.label.setScaledContents(False)
        self.label.setWordWrap(True)
        self.label.setObjectName("label")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(340, 260, 151, 31))
        self.textEdit.setObjectName("textEdit")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 609, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.radio_buts = [self.radioButton, self.radioButton_2, self.radioButton_3]

        self.pushButton.clicked.connect(self.click)
    def end(self):
        sys.exit(app.exec())

    def db(self):
        #удалить все в ответах
        sql = ''' DELETE FROM answer '''
        self.cur.execute(sql)
        self.conn.commit()

        self.cur.execute('SELECT * FROM questions')
        rows = self.cur.fetchall()
        rows = sorted(rows, key=lambda row: (row[0]))
        for row in rows: 
            self.questions.append(row[1])
            self.answers.append([str(row[3]), str(row[4]), str(row[5])])
            self.next_questions.append(row[8])

        self.cur.execute('SELECT * FROM rules')
        rows = self.cur.fetchall()
        for row in rows:
            self.rules.append([row[1], row[2], row[3]])

    def check_chouse(self):
        txt = self.textEdit.toPlainText()
        for rad_but in self.radio_buts:
            if rad_but.isChecked():
                return True
        if txt.isdigit():
            return True

    def check_answer(self):
        if self.radioButton.isChecked():
            insert_query = 'INSERT INTO answer (id_quest, anw) VALUES' + '(' + str(self.id_quest) + ', \'' + self.radioButton.text() + '\')'
        elif self.radioButton_2.isChecked():
            insert_query = 'INSERT INTO answer (id_quest, anw) VALUES' + '(' + str(self.id_quest) + ', \'' + self.radioButton_2.text() + '\')'
        elif self.radioButton_3.isChecked():
            insert_query = 'INSERT INTO answer (id_quest, anw) VALUES' + '(' + str(self.id_quest) + ', \'' + self.radioButton_3.text() + '\')'
        else:
            insert_query = 'INSERT INTO answer (id_quest, anw) VALUES' + '(' + str(self.id_quest) + ', \'' + self.textEdit.toPlainText() + '\')'
        self.cur.execute(insert_query)
        self.conn.commit()

    def check_rules(self):
        actualRules=[]
        for r in self.rules:
            if self.id_quest + 1 == r[0]:
                actualRules.append([r[1], r[2]])
        for rb in self.radio_buts:
            if rb.isChecked():
                for ac in actualRules:
                    if rb.text() == ac[0]:
                        nextQuestion = ac[1]
        print(nextQuestion)
        return nextQuestion

    def next_question(self):
        if self.next_questions[self.id_quest] > 0:
            self.id_quest = self.next_questions[self.id_quest] - 1
        elif self.next_questions[self.id_quest] == 0:
            self.id_quest = self.check_rules() - 1
        elif self.next_questions[self.id_quest] == -1:
            self.end()

    def print_question(self):
        self.label.setText(self.questions[self.id_quest])
        for j in range(3):
            if self.answers[self.id_quest][j] == 'None':
                self.radio_buts[j].setHidden(True)
            else:
                self.radio_buts[j].setHidden(False)
                self.radio_buts[j].setText(self.answers[self.id_quest][j])
        if self.answers[self.id_quest] == ['None', 'None', 'None']:
            self.textEdit.setHidden(False)
        else:
            self.textEdit.setHidden(True)

    def del_check_rb(self):
        for rb in self.radio_buts:
            rb.setAutoExclusive(False)
            rb.setChecked(False)
            rb.repaint()
            rb.setAutoExclusive(True)
            rb.hide()
        self.textEdit.setText('')

    def click(self):
        '''
        Проверка выбран ли ответ
        Считывание ответа
        Занесение ответа в бд
        Определение какой следующий вопрос
        Вывод вопроса'''
        # print(self.id_quest)
        if self.check_chouse():
            self.check_answer()
            self.next_question()
            # print(self.id_quest)
            self.del_check_rb()
            self.print_question()


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Экспертая система"))
        self.pushButton.setText(_translate("MainWindow", "PushButton"))
        self.radioButton.setText(_translate("MainWindow", "RadioButton"))
        self.radioButton_2.setText(_translate("MainWindow", "RadioButton"))
        self.radioButton_3.setText(_translate("MainWindow", "RadioButton"))
        self.label.setText(_translate("MainWindow", "121212"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    ui.db()
    ui.print_question()
    # ui.click()
    MainWindow.show()
    sys.exit(app.exec())
